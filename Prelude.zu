module Prelude.

-- | Defines inductive type for Leibniz equality and
-- reflection.
-- 
-- Performs unification and by unification, it proves
-- some value
inductive data Eq {a} (x, y : a) where
  Refl : Eq x x.

  -- | Defines a proof that: `a = b`, implies `b = a` by
  -- induction.
  Eq/symm : {a, b} -> a = b -> b = a := case
    Refl => Refl.

-- | Record for lazy evaluation
#[derive new]
#[do_notation IO/pure IO/>>=]
struct IO (a : Type).
  #[ffi]
  IO/pure : {a} -> a -> IO a := external!.

  #[ffi]
  IO/>>= : {a, b} -> IO a -> (IO a -> IO b) -> IO b := external!.

  -- Prints in the stdout
  --
  -- ```
  -- main : IO () := do
  --  println "hello world"
  -- ```
  #[ffi]
  IO/println : String -> IO () := external!.

-- Performs unsafe IO in the type level, or anywhere you are.
--
-- It's unsafe and should not be used.
#[ffi]
#[unsafe]
unsafePerformIO : {a} -> IO a -> a := external!.
