use crate::passes::parser::Parsed;
use crate::ast::Element;
use std::str::FromStr;
use lalrpop_util::ErrorRecovery;

grammar<'err, 'unique>(
  errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, crate::passes::parser::InnerError>>,
  filename: &str,
  unique: &'unique std::cell::Cell<u64>,
);

extern {
  type Location = usize;
  type Error = crate::passes::parser::InnerError;
}

match {
    r"\s*" => { }, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
} else {
  _
}

/// Parses an entire file declaration into the abstract Parsed tree, so
/// we can resolve and typecheck it.
pub File: crate::ast::File<Parsed> = {
  <s: @L> <name:ModuleName?> <stmts:TopLevel*> <e: @R> => crate::ast::File {
    // Remove the .zu extension from filenames, so the modules are more
    // idiomatic.
    name: name.unwrap_or_else(|| filename.to_string().replace(".zu", "")),
    stmts,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },
};

/// Parses the header module declaration within the file, this is used to
/// declare the module name.
ModuleName: String = {
  "module" <name:Reference> <semi:Semi?> => name.text,
}

/// Parses a value, this is a term that can be used as a value.
Value: crate::ast::Term<Parsed> = {
  <s: @L> "=" <value:Term> <e: @R> => value.into(),
};

/// Parses an attribute, this is a term that can be used as a value.
Attribute: crate::ast::Attribute<Parsed> = {
  <s: @L> "@" "[" "partial" "]" <e: @R> => {
    // Report the error
    errors.push(lalrpop_util::ErrorRecovery {
      dropped_tokens: vec![],
      error: lalrpop_util::ParseError::User {
        error: crate::passes::parser::InnerError::UnsupportedAttribute {
          err_span: crate::ast::Location::new(s, e, filename, &unique).into(),
        },
      },
    });

    crate::ast::Attribute::_TODO(std::marker::PhantomData)
  },
  <s: @L> "@" "[" "alias" <names:Sep<",", Reference>> "]" <e: @R> => {
    // Report the error
    errors.push(lalrpop_util::ErrorRecovery {
      dropped_tokens: vec![],
      error: lalrpop_util::ParseError::User {
        error: crate::passes::parser::InnerError::UnsupportedAttribute {
          err_span: crate::ast::Location::new(s, e, filename, &unique).into(),
        },
      },
    });

    crate::ast::Attribute::_TODO(std::marker::PhantomData)
  },
  <s: @L> "@" "[" "derive" <names:Sep<",", Reference>> "]" <e: @R> => {
    // Report the error
    errors.push(lalrpop_util::ErrorRecovery {
      dropped_tokens: vec![],
      error: lalrpop_util::ParseError::User {
        error: crate::passes::parser::InnerError::UnsupportedAttribute {
          err_span: crate::ast::Location::new(s, e, filename, &unique).into(),
        },
      },
    });

    crate::ast::Attribute::_TODO(std::marker::PhantomData)
  },
  <s: @L> "@" "[" "do_notation" <names:Sep<",", Reference>> "]" <e: @R> => {
    // Report the error
    errors.push(lalrpop_util::ErrorRecovery {
      dropped_tokens: vec![],
      error: lalrpop_util::ParseError::User {
        error: crate::passes::parser::InnerError::UnsupportedAttribute {
          err_span: crate::ast::Location::new(s, e, filename, &unique).into(),
        },
      },
    });

    crate::ast::Attribute::_TODO(std::marker::PhantomData)
  },
};

/// GADT constructor, this is a constructor that can be used to create new
/// types.
Parameters: Vec<crate::ast::Domain<Parsed>> = {
  "of" <parameters:Sep<",", Parameter>> => parameters,
};

/// Record coinductive property
Property: crate::ast::Property<Parsed> = {
  <s: @L> "val" <name:Reference> ":" <type_repr:Term> <e: @R> => crate::ast::Property {
    name,
    type_repr: type_repr.into(),
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },
};

/// Parses a signature, this is a term that can be used as a type.
Constructor: crate::ast::Constructor<Parsed> = {
  <s: @L> "|" <name:Reference> ":" <type_repr:Term> <e: @R> => {
    if name.text.chars().next().unwrap().is_lowercase() {
      errors.push(lalrpop_util::ErrorRecovery {
        dropped_tokens: vec![],
        error: lalrpop_util::ParseError::User {
          error: crate::passes::parser::InnerError::InvalidVariantCase {
            err_span: name.meta.clone().into(),
          }
        },
      });
    }

    crate::ast::Constructor {
      name,
      type_repr: type_repr.into(),
      meta: crate::ast::Location::new(s, e, filename, &unique),
    }
  },
};

KindTerm: crate::ast::Term<Parsed> = {
  <s: @L> "*" <e: @R> => crate::ast::Term::Prim(crate::ast::make_universe(crate::ast::Location::new(s, e, filename, &unique))),
};

/// Haskell kind syntax
Kind: crate::ast::Term<Parsed> = {
  KindTerm,
  <s: @L> <domain:KindTerm> "->" <codomain:Kind> <e: @R> => crate::ast::Term::Pi(crate::ast::Pi {
    meta: crate::ast::Location::new(s, e, filename, &unique),
    icit: crate::ast::Icit::Expl,
    domain: crate::ast::Domain {
      name: vec![None],
      type_repr: Box::new(crate::ast::Term::Prim(crate::ast::make_universe(domain.meta().clone()))),
      icit: crate::ast::Icit::Expl,
      meta: domain.meta().clone(),
    },
    codomain: codomain.into(),
  }),
};

KindOrTerm: crate::ast::Term<Parsed> = {
  Kind,
  Call,
};

/// Parses a signature, this is a term that can be used as a type.
Parameter: crate::ast::Domain<Parsed> = {
  // Parses explicit arguments, which you need to specify
  // the type.
  <s: @L> <name:Reference> <e: @R> => crate::ast::Domain {
    name: vec![Some(name)],
    type_repr: Box::new(crate::ast::Term::Prim(crate::ast::make_universe(crate::ast::Location::new(s, e, filename, &unique)))),
    icit: crate::ast::Icit::Expl,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },

  // Parses explicit arguments, which you need to specify
  // the type.
  <s: @L> <name:Reference> ":" <value:KindOrTerm> <e: @R> => crate::ast::Domain {
    name: vec![Some(name)],
    type_repr: value.into(),
    icit: crate::ast::Icit::Expl,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },
  
  // Parses explicit arguments, which you don't need to specify
  // the type.
  <s: @L> "{" <names:Sep<",", Reference>> "}" <e: @R> => crate::ast::Domain {
    name: names.into_iter().map(Some).collect(),
    type_repr: Box::new(crate::ast::Term::Prim(crate::ast::make_universe(crate::ast::Location::new(s, e, filename, &unique)))),
    icit: crate::ast::Icit::Impl,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },
  
  // Parses explicit arguments, which you don't need to specify
  // the type.
  <s: @L> "{" <names:Sep<",", Reference>> ":" <value:Term> "}" <e: @R> => crate::ast::Domain {
    name: names.into_iter().map(Some).collect(),
    type_repr: value.into(),
    icit: crate::ast::Icit::Impl,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },
};

/// Last token of a statement, this is a semicolon.
Semi: std::string::String = {
  ";" => ";".to_string(),
};

/// Top-level statements, this is a statement that can be used
/// outside of a block.
TopLevel: crate::ast::Stmt<Parsed> = {
  <stmt:Stmt> <semi:Semi?> => stmt,
}

/// Parses a top-level statement, this is a statement that can be used
/// outside of a block.
Stmt: crate::ast::Stmt<Parsed> = {
  // SECTION: Commands
  // 
  // Parses `@eval` command, which evaluates a term and prints the result.
  <s: @L> "@eval" <value:Term> <e: @R> => crate::ast::Stmt::Eval(crate::ast::Eval {
    value,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  }),

  // Parses `@type` command, which types a term and prints the result.
  <s: @L> "@type" <value:Term> <e: @R> => crate::ast::Stmt::Type(crate::ast::Type {
    value,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  }),

  // Parses `@import` command, which set to the resolver to import to the
  // current file.
  <s: @L> "import" <import:Reference> <e: @R> => crate::ast::Stmt::Import(crate::passes::parser::Import {
    text: import.text,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  }),

  /// Parses an coinductive data type declaration, this is a type declaration
  /// that can be used to create new types.
  <s: @L> 
  <doc_strings:DocString*>
  <attribute:Attribute*> "record"
  <name: Reference>
  <parameters:Parameters?> "where"
  <properties:Property*>
  <e: @R> => {
    // Report the error
    errors.push(lalrpop_util::ErrorRecovery {
      dropped_tokens: vec![],
      error: lalrpop_util::ParseError::User {
        error: crate::passes::parser::InnerError::UnsupportedCoinductiveData {
          err_span: name.meta.into(),
        },
      },
    });

    // Return the default sentinel value for statements, which is an error.
    crate::ast::Stmt::Error(crate::ast::Error {
      message: format!("unsupported coinductive data `{}`", name.text),
      full_text: (&input[s..e]).to_string(),
      meta: crate::ast::Location::new(s, e, filename, &unique),
    })
  },

  /// Parses an inductive data type declaration, this is a type declaration
  /// that can be used to create new types.
  <s: @L> 
  <doc_strings:DocString*>
  <attribute:Attribute*> "inductive" "data"
  <name: Reference>
  <parameters:Parameters?> "where"
  <constructors:Constructor*>
  <e: @R> => {
    // Report the error
    errors.push(lalrpop_util::ErrorRecovery {
      dropped_tokens: vec![],
      error: lalrpop_util::ParseError::User {
        error: crate::passes::parser::InnerError::UnsupportedInductiveData {
          err_span: name.meta.into(),
        },
      },
    });

    // Return the default sentinel value for statements, which is an error.
    crate::ast::Stmt::Error(crate::ast::Error {
      message: format!("unsupported inductive data `{}`", name.text),
      full_text: (&input[s..e]).to_string(),
      meta: crate::ast::Location::new(s, e, filename, &unique),
    })
  },

  // Parses a simple signature binding, which haves a type, value and a name.
  //
  // It can be compared to a function signature, or let binding in other languages.
  <s: @L>
  <doc_strings:DocString*>
  <attribute:Attribute*> "fun"
  <name:Reference>
  <type_repr:TypeRepr?>
  <value:Value?>
  <e: @R> => match (type_repr, value) {
    // Unacceptable Binding
    (None, None) => {
      // Report the error
      errors.push(lalrpop_util::ErrorRecovery {
        dropped_tokens: vec![],
        error: lalrpop_util::ParseError::User {
          error: crate::passes::parser::InnerError::ExpectedStatement {
            err_span: miette::SourceSpan::from(s..e),
          },
        },
      });

      // Return the default sentinel value for statements, which is an error.
      crate::ast::Stmt::Error(crate::ast::Error {
        message: format!("expected a type or value for binding `{}`", name.text),
        full_text: (&input[s..e]).to_string(),
        meta: crate::ast::Location::new(s, e, filename, &unique),
      })
    }
    // Infer Binding
    (None, Some(value)) => {
      crate::ast::Stmt::Binding(crate::ast::Binding {
        doc_strings,
        attributes: vec![],
        type_repr: crate::ast::Term::Hole(crate::ast::Hole {
          meta: crate::ast::Location::clone(<crate::passes::parser::Reference as crate::ast::Element<Parsed>>::meta(&name)),
        }),
        name,
        value: value.into(),
        meta: crate::ast::Location::new(s, e, filename, &unique),
      })
    }
    // Signature
    (Some(type_repr), None) => {
      crate::ast::Stmt::Signature(crate::passes::parser::Signature {
        type_repr: type_repr.into(),
        name,
        meta: crate::ast::Location::new(s, e, filename, &unique),
      })
    }
    // Typed Binding
    (Some(type_repr), Some(value)) => {
      crate::ast::Stmt::Binding(crate::ast::Binding {
        doc_strings,
        attributes: vec![],
        type_repr: type_repr.into(),
        name,
        value: value.into(),
        meta: crate::ast::Location::new(s, e, filename, &unique),
      })
    }
  },
};

/// Parses an optional type representation for a statement, this is a colon
/// followed by a type representation.
TypeRepr: crate::ast::Term<Parsed> = {
  ":" <value:Term> => value.into(),
};

/// Primary expressions, that aren't necessary expressions but can be used as
/// the base of an expression.
Primary: crate::ast::Term<Parsed> = {
  "(" <Term> ")" => crate::ast::Term::Group(<>.into()),
  <r:Reference> => match r.text {
    _ if r.text == "_" => crate::ast::Term::Hole(crate::ast::Hole { meta: r.meta.clone() }),
    _ if r.text == "Type" => crate::ast::Term::Prim(crate::ast::make_universe(r.meta.clone())),
    _ if r.text == "Int" => crate::ast::Term::Prim(crate::ast::make_int(r.meta.clone())),
    _ if r.text == "String" => crate::ast::Term::Prim(crate::ast::make_string(r.meta.clone())),
    _ => crate::ast::Term::Reference(r),
  },
  <s: @L> <value:String> <e: @R> => crate::ast::Term::Str(crate::ast::Str {
    value,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  }),
  <s: @L> <value:Int> <e: @R> => crate::ast::Term::Int(crate::ast::Int {
    value,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  }),
};

/// Parses a call with a single argument, this is a primary term followed by a
/// single argument.
Apply: crate::ast::Term<Parsed> = {
  <s: @L> <callee:Call> <argument:Primary> <e: @R> => match callee.clone().unwrap() {
    crate::ast::Term::Apply(mut apply) => {
      apply.arguments.push(argument);
      crate::ast::Term::Apply(apply)
    }
    _ => crate::ast::Term::Apply(crate::ast::Apply {
      callee: Box::new(callee),
      arguments: vec![argument],
      meta: crate::ast::Location::new(s, e, filename, &unique),
    }),
  },
};

FactorOp: std::string::String = {
  "*" => "*".to_string(),
  "/" => "/".to_string(),
};

/// Factor operators, this is a list of terms separated by arithmetic operators.
Factor: crate::ast::Term<Parsed> = {
  Call,
  <s: @L> <value:Call> "." <name:Reference> <e: @R> => {
    // Report the error
    errors.push(lalrpop_util::ErrorRecovery {
      dropped_tokens: vec![],
      error: lalrpop_util::ParseError::User {
        error: crate::passes::parser::InnerError::UnsupportedRecordIndex {
          err_span: name.meta.into(),
        }
      },
    });

    // Return the default sentinel value for statements, which is an error.
    crate::ast::Term::Error(crate::ast::Error {
      message: format!("unsupported record indexing `{}`", name.text),
      full_text: (&input[s..e]).to_string(),
      meta: crate::ast::Location::new(s, e, filename, &unique),
    })
  },
  <s: @L> <a:Call> <op:FactorOp> <b:Factor> <e: @R> => crate::ast::Term::Apply(crate::ast::Apply {
    meta: crate::ast::Location::new(s, e, filename, &unique),
    callee: crate::ast::Term::Reference(crate::passes::parser::Reference {
      text: op,
      meta: crate::ast::Location::new(s, e, filename, &unique),
    }).into(),
    arguments: vec![a, b],
  }),
};

ArithmeticOp: std::string::String = {
  "+" => "+".to_string(),
  "-" => "-".to_string(),
}

/// Arithmetic operators, this is a list of terms separated by arithmetic operators.
Arithmetic: crate::ast::Term<Parsed> = {
  Factor,
  <s: @L> <a:Factor> <op:ArithmeticOp> <b:Arithmetic> <e: @R> => crate::ast::Term::Apply(crate::ast::Apply {
    meta: crate::ast::Location::new(s, e, filename, &unique),
    callee: crate::ast::Term::Reference(crate::passes::parser::Reference {
      text: op,
      meta: crate::ast::Location::new(s, e, filename, &unique),
    }).into(),
    arguments: vec![a, b],
  }),
};

LogicalOp: std::string::String = {
  "&&" => "&&".to_string(),
  "||" => "||".to_string(),
  "==" => "==".to_string(),
  "!=" => "!=".to_string(),
  ":=" => ":=".to_string(),
  "<=" => "<=".to_string(),
  ">=" => ">=".to_string(),
  "++" => "++".to_string(),
  "**" => "**".to_string(),
  "$" => "$".to_string(),
  "<" => "<".to_string(),
  ">" => ">".to_string(),
};

/// Logical operators, this is a list of terms separated by logical operators.
Logical: crate::ast::Term<Parsed> = {
  Arithmetic,

  /// Annotation expression, this is a value followed by a colon and a type.
  <s: @L> <value:Arithmetic> "is" <type_repr:Logical> <e: @R> => crate::ast::Term::Anno(crate::ast::Anno {
    meta: crate::ast::Location::new(s, e, filename, &unique),
    value: value.into(),
    type_repr: type_repr.into(),
  }),

  /// Logical operators, this is a list of terms separated by logical operators.
  <s: @L> <a:Arithmetic> <op:LogicalOp> <b:Logical> <e: @R> => crate::ast::Term::Apply(crate::ast::Apply {
    meta: crate::ast::Location::new(s, e, filename, &unique),
    callee: crate::ast::Term::Reference(crate::passes::parser::Reference {
      text: op,
      meta: crate::ast::Location::new(s, e, filename, &unique),
    }).into(),
    arguments: vec![a, b],
  }),
};

/// Parses a pi expression, this is a list of arguments followed by an arrow
/// and a value.
Pi: crate::ast::Pi<Parsed> = {
  <s: @L> <domain:Domain> "->" <value:Arrow> <e: @R> => crate::ast::Pi {
    meta: crate::ast::Location::new(s, e, filename, &unique),
    icit: crate::ast::Icit::Expl,
    codomain: value.into(),
    domain,
  },
};

/// Arrow type signature, this is a domain followed by an arrow and a value.
Arrow: crate::ast::Term<Parsed> = {
  Logical,
  <Pi> => crate::ast::Term::Pi(<>),
};

/// Represents a domain for pi expressions, this is a variable with a type.
Domain: crate::ast::Domain<Parsed> = {
  /// Parses unnamed explicit arguments, which you don't need to specify
  /// the type and neither the name.
  <term:Call> => crate::ast::Domain {
    name: vec![None],
    meta: term.meta().clone(),
    type_repr: term.into(),
    icit: crate::ast::Icit::Expl,
  },

  // Parses explicit arguments, which you need to specify
  // the type.
  <s: @L> <names:Sep<",", Reference>> ":" <value:Call> <e: @R> => crate::ast::Domain {
    name: names.into_iter().map(Some).collect(),
    type_repr: value.into(),
    icit: crate::ast::Icit::Expl,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },

  // Parses explicit arguments, which you don't need to specify
  // the type.
  <s: @L> "{" <names:Sep<",", Reference>> "}" <e: @R> => crate::ast::Domain {
    name: names.into_iter().map(Some).collect(),
    type_repr: Box::new(crate::ast::Term::Prim(crate::ast::make_universe(crate::ast::Location::new(s, e, filename, &unique)))),
    icit: crate::ast::Icit::Impl,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },
  
  // Parses explicit arguments, which you don't need to specify
  // the type.
  <s: @L> "{" <names:Sep<",", Reference>> ":" <value:Term> "}" <e: @R> => crate::ast::Domain {
    name: names.into_iter().map(Some).collect(),
    type_repr: value.into(),
    icit: crate::ast::Icit::Impl,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },
};

/// Parses a call, this is a primary term followed by a list of arguments. It can 
/// parse either a call or a call with a single argument.
Call: crate::ast::Term<Parsed> = {
  Primary,
  Apply,
};

Arguments: Vec<crate::ast::Pattern<Parsed>> = {
  "(" <arguments:Sep<",", Pattern>> ")" => arguments,
};

Pattern: crate::ast::Pattern<Parsed> = {
  <s: @L> <constructor:Reference> <arguments:Arguments?> <e: @R> => match arguments {
    // The case that the pattern is a variable and have arguments, like:
    // some (x y z), it should be parsed as a constructor with arguments, but it
    // will trigger an error
    Some(arguments) if constructor.text.chars().next().unwrap().is_lowercase() => {
      errors.push(lalrpop_util::ErrorRecovery {
        dropped_tokens: vec![],
        error: lalrpop_util::ParseError::User {
          error: crate::passes::parser::InnerError::UnexpectedVariablePatternWithArguments {
            err_span: constructor.meta.clone().into(),
          }
        },
      });

      crate::ast::Pattern::Constructor(constructor, arguments, crate::ast::Location::new(s, e, filename, &unique))
    },
    Some(arguments) => crate::ast::Pattern::Constructor(constructor, arguments, crate::ast::Location::new(s, e, filename, &unique)),
    None if constructor.text.chars().next().unwrap().is_uppercase() => crate::ast::Pattern::Constructor(
      constructor,
      vec![],
      crate::ast::Location::new(s, e, filename, &unique),
    ),
    None => crate::ast::Pattern::Var(constructor, crate::ast::Location::new(s, e, filename, &unique))
  },
};

/// Parses a case expression, this is a list of cases followed by a pipe and
/// a value.
Case: crate::ast::Case<Parsed> = {
  <s: @L> <pattern:Sep1<",", Pattern>> "=>" <value:Call> <e: @R> => crate::ast::Case {
    pattern: nonempty::NonEmpty::from_vec(pattern.into_iter().map(Box::new).collect()).unwrap(),
    value: value.into(),
    meta: crate::ast::Location::new(s, e, filename, &unique),
  },

  // Error handling for the parser, this is used to report errors when the
  // parser fails to parse a statement.
  <s: @L> <error:!> <e: @R> => {
    let message = error.error.to_string();

    errors.push(error);

    crate::ast::Case {
      pattern: nonempty::nonempty![Box::new(crate::ast::Pattern::Wildcard(crate::ast::Location::new(s, e, filename, &unique)))],
      value: crate::ast::Term::Error(crate::ast::Error {
        message,
        full_text: (&input[s..e]).to_string(),
        meta: crate::ast::Location::new(s, e, filename, &unique),
      }).into(),
      meta: crate::ast::Location::new(s, e, filename, &unique),
    }
  },
};

/// Parser for expressions in the language, these are the terms but it doesn't
/// parses as primary.
pub Term: crate::ast::Term<Parsed> = {
  Arrow,

  /// Parses a lambda function, this is a list of arguments followed by an arrow
  /// and a value.
  <s: @L> "\\" <arguments:Sep<",", Reference>> "->" <value:Term> <e: @R> => crate::ast::Term::Fun(crate::ast::Fun {
    arguments,
    value: value.into(),
    meta: crate::ast::Location::new(s, e, filename, &unique),
  }),

  /// Parses a elim expression, this is a list of cases followed by a pipe and
  /// a value.
  <s: @L> "elim" <scrutinee:Sep1<"and", Term>> "of" <cases:Sep<",", Case>> <e: @R> => crate::ast::Term::Elim(crate::ast::Elim {
    scrutinee: nonempty::NonEmpty::from_vec(scrutinee.into_iter().map(Box::new).collect()).unwrap(),
    patterns: cases,
    meta: crate::ast::Location::new(s, e, filename, &unique),
  }),

  // Error handling for the parser, this is used to report errors when the
  // parser fails to parse a statement.
  <s: @L> <error:!> <e: @R> => {
    let message = error.error.to_string();

    errors.push(error);

    crate::ast::Term::Error(crate::ast::Error {
      message,
      full_text: (&input[s..e]).to_string(),
      meta: crate::ast::Location::new(s, e, filename, &unique),
    })
  },
}

/// Parses a relevent document string, this is a string that is used to document
/// the code.
DocString: crate::ast::DocString<Parsed> = <s: @L> <text:r"///.*\n"> <e: @R> => crate::ast::DocString {
  text: (&text[2..]).to_string(),
  full_text: text.to_string(),
  meta: crate::ast::Location::new(s, e, filename, &unique),
};

Int: isize = <s:r"[0123456789]+"> => isize::from_str(s).unwrap();
String: std::string::String = <text:r#""(\\\\|\\"|[^"\\])*""#> => (&text[1..text.len() - 1]).to_string();

// Reference token text lexer
Text: std::string::String = {
  "`" <text:LogicalOp> => text.to_string(),
  "`" <text:ArithmeticOp> => text.to_string(),
  "`" <text:FactorOp> => text.to_string(),
  <text:"_"> => text.to_string(),
  <text:r"[a-zA-Z][a-zA-Z0-9/_]*"> => text.to_string(),
}

// Reference token lexer
Reference: crate::passes::parser::Reference = {
  <s: @L> <text:Text> <e: @R> => crate::passes::parser::Reference {
    text: text.to_string(),
    meta: crate::ast::Location::new(s, e, filename, &unique),
  }
};

Sep1<U, T>: nonempty::NonEmpty<T> = {
  <vec: Sep<U, T>> => match vec {
    mut vec if vec.len() == 0 => panic!("expected at least one element"),
    vec => nonempty::NonEmpty::from_vec(vec).unwrap(),
  },
};

/// Separated by commas, this is used for function arguments. It's useful
/// to parse vectors, more specifically.
#[inline]
Sep<U, T>: Vec<T> = {
  <mut v:(<T> U)*> <e:T?> => match e {
    Some(e) => {
        v.push(e);
        v
    }
    None => v
  }
}
